//If the first turn out of the box to face the ramp is a left turn, you are in the left box.

import rxtxrobot.ArduinoNano;
import rxtxrobot.RXTXRobot;

public class Nav_LeftBox
{
	public static RXTXRobot Murph;
	public static int PING_PIN = 11;
	
	public static void main(String[] args)
	{
		Murph = new ArduinoNano();
		Murph.setPort("COM3");
		Murph.connect();
		Murph.attachMotor(RXTXRobot.MOTOR1, 5);
		Murph.attachMotor(RXTXRobot.MOTOR2, 6);
		Murph.attachServo(RXTXRobot.SERVO1, 10);
		startingBox();
		firstTurn();
		topOfHill();
		downTheRamp();
		avoidObstacle2();
		toPingPongBall();
		toBridgePart1();
		toBridgePart2();
		crossBridge();
		avoidDynamicObstacle();
		measureConductivity();
	}
	
	public static int getPingRight()
	{
		int dist = 0;
		Murph.moveServo(RXTXRobot.SERVO1, 125);
		Murph.sleep(500);
		for (int x = 0; x < 3; ++x)
		{
			System.out.println("Response for right distance: " + Murph.getPing(PING_PIN) + " cm.");
			dist += Murph.getPing(PING_PIN);
			Murph.sleep(300);
		}
		dist = dist / 3;
		return dist;
	}
	
	public static int getPingCenter()
	{
		int dist = 0;
		Murph.moveServo(RXTXRobot.SERVO1, 90);
		for (int x = 0; x < 3; ++x)
		{
			System.out.println("Response for center distance: " + Murph.getPing(PING_PIN) + " cm.");
			dist += Murph.getPing(PING_PIN);
			Murph.sleep(300);
		}
		dist = dist / 3;
		return dist;
	}
	
	public static int getPingLeft()
	{
		int dist = 0;
		Murph.moveServo(RXTXRobot.SERVO1, 55);
		Murph.sleep(500);
		for (int x = 0; x < 3; ++x)
		{
			System.out.println("Response for left distance: " + Murph.getPing(PING_PIN) + " cm");
			dist += Murph.getPing(PING_PIN);
			Murph.sleep(300);
		}
		dist = dist / 3;
		return dist;
		
	}
	
	public static int getPingFarLeft()
	{
		int dist = 0;
		Murph.moveServo(RXTXRobot.SERVO1, 179);
		Murph.sleep(500);
		for (int x = 0; x < 3; ++x)
		{
			System.out.println("Response for far left distance: " + Murph.getPing(PING_PIN) + " cm");
			dist += Murph.getPing(PING_PIN);
			Murph.sleep(300);
		}
		dist = dist / 3;
		return dist;
		
	}
	
	public static int getPingFarRight()
	{
		int dist = 0;
		Murph.moveServo(RXTXRobot.SERVO1, 179);
		Murph.sleep(500);
		for (int x = 0; x < 3; ++x)
		{
			System.out.println("Response for far right distance: " + Murph.getPing(PING_PIN) + " cm");
			dist += Murph.getPing(PING_PIN);
			Murph.sleep(300);
		}
		dist = dist / 3;
		return dist;	
	}
	
	public static void startingBox()
	{
		//Leave the starting box, then turn towards the ramp
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 1800); //Move forward out of the box
		int dist = 0;
		do
		{
			Murph.refreshDigitalPins();
			dist = getPingCenter();
		if (dist < 40 && dist > 25)//if the robot is between 15 and 25 cm from the first wall, it should perform it first turn
		{
			System.out.println("You should now be out of the box.");
		}else if (dist < 25)
		{
			Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -340, 1000); //Back up because you are too close to the wall
		}else if (dist > 40)
		{
			Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 600); //Move forward because you are too far away
		}
		}while (dist > 40 || dist < 25);
	}
	
	public static void firstTurn()
	{
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -340, 1000); //Turn Left
		System.out.println("You should now be facing the hill.");
		Murph.sleep(500);
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 6000); //Move forward towards the hill
		int dist = 10000;
		do
		{
			Murph.refreshDigitalPins();
			dist = getPingCenter();
			if (dist > 45)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 3000);
				System.out.println("You should now be on top of the hill.");
				Murph.sleep(750);
				Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, 340, 1200);	//Turn Right
				System.out.println("You should now be facing the second area.");
			}else
			{
				Murph.sleep(2000);
			}
		}while (dist <= 45);
	}
	
	public static void topOfHill()
	{
		moveBoom();
		System.out.println("You should now have the boom up.");
		displayTempAndWind();
		Murph.runMotor(RXTXRobot.MOTOR3, -300, 1000);
		System.out.println("You should now have the boom down");
	}
	
	public static int getThermistorReading()
	{
		int sum = 0;
		int readingCount = 30;
		{
			for (int i = 0; i < readingCount; i++)
			{
				Murph.refreshAnalogPins();
				int reading = Murph.getAnalogPin(0).getValue();
				sum += reading;
			}
		}
		return sum / readingCount;
	}
	
	public static int getThermistorReading2()
	{
		int sum = 0;
		int readingCount2 = 30;
		{
			for (int i = 0; i < readingCount2; i++)
			{
				Murph.refreshAnalogPins();
				int reading = Murph.getAnalogPin(2).getValue();
				sum += reading;
			}
		}
		return sum / readingCount2;
	}
	
	public static double getWindSpeed()
	{
		int thermistorReading = getThermistorReading();
		int thermistorReading2 = getThermistorReading2();
		return (13.12 - thermistorReading + 0.6215 * thermistorReading2) / (11.37 - 0.3695 * thermistorReading2);
	}
	
	public static void displayTempAndWind()
	{
		int thermistorReading = getThermistorReading();
		int thermistorReading2 = getThermistorReading2();
		double windSpeed = getWindSpeed();
		
		System.out.println("The open probe reads the value: " + thermistorReading);
		System.out.println("In volts: " + (thermistorReading * (5.0/1023.0)));
		System.out.println("The closed probe reads the value: " + thermistorReading2);
		System.out.println("In volts: " + (thermistorReading2 * (5.0/1023.0)));
		System.out.printf("This open probe reads: %s degrees Celsius.\n",((thermistorReading) - 665.28)/-3.8994);
		System.out.printf("This closed probe reads: %s degrees Celsius.\n",((thermistorReading2) - 720.71)/-5.4482);		
		System.out.printf("The wind speed is %s kilometers per hour.",windSpeed);
	}

	public static void moveBoom()
	{
		Murph.attachMotor(RXTXRobot.MOTOR3, 7); //Connect the servos to the Arduino
		Murph.runMotor(RXTXRobot.MOTOR3, 300, 3000);
		System.out.println("The servo should currently be up.");
	}
	
	public static void downTheRamp()
	{
		//Go to the bottom of the ramp
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 3500);
	}
	
	public static void avoidObstacle2()
	{
		int centerDist = 10000;
		int leftDist = 10000;
		int rightDist = 10000;
		do
		{
			Murph.refreshDigitalPins();
			centerDist = getPingCenter();
			leftDist = getPingLeft();
			rightDist = getPingRight();
			if (centerDist < 30 || leftDist < 30)//if centerDist is less than 30 OR if leftDist is less than 30 (if there's something to the left or center of the robot)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, 340, 1000);
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 2500);
			}else if (rightDist < 30)//if there's something to the left of the robot
			{
				Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, 340, 1200);
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 3500);
			}else
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 600);//otherwise, go forward
			}
		}while (centerDist > 30 && leftDist > 30 && rightDist > 30);
	}
	
	public static void toPingPongBallWall()
	{
		int leftDist = 10000;
		Murph.refreshDigitalPins();
		leftDist = getPingFarLeft();
		if (leftDist >= 30)
		{
			obstacleExists();
		}else
		{
			toPingPongBall();
		}
	}
	
	public static void obstacleExists()
	{
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -340, 1300);
		int centerDist = 10000;
		do
		{
			Murph.refreshDigitalPins();
			centerDist = getPingCenter();
			if (centerDist > 30)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 500);
			}else if (centerDist < 15)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -340, 250);
			}
		}while (centerDist > 30 || centerDist < 15);//while centerDist is more than 30 OR less than 15
		Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, 340, 1000);
		toPingPongBall();
	}
	
	public static void toPingPongBall()
	{
		Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, 340, 1200);
		int distCenter = 100;
		do
		{
			Murph.refreshDigitalPins();
			distCenter = getPingCenter();
			if (distCenter > 30)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 1000);
			}else if (distCenter < 30 && distCenter < 20)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 400);
			}else if (distCenter > 20 && distCenter < 10)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 350);
			}
		}while (distCenter > 10);
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 700);
		Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -340, 700);
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 700);
		Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -340, 700);
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 700);
		Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -340, 700);
		System.out.println("You should now have a ping pong ball.");
	}
	
	public static void toBridgePart1()
	{
		Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, 340, 1000);
		int dist = 10000;
		do
		{
			Murph.refreshDigitalPins();
			dist = getPingCenter();
			if (dist >= 45)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 1000);
			}else if (dist < 12)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -340, 300);
			}else if (dist >= 12 && dist < 45)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -340, 1000);
			}
		}while (dist >= 45 || dist < 12);
	}
	
	public static void toBridgePart2()
	{
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -340, 1000);
		int dist = 10000;
		do
		{
			Murph.refreshDigitalPins();
			dist = getPingCenter();
			if (dist >= 30)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 1000);
			}else if (dist < 30 && dist >= 20)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 300);
			}else if (dist < 12)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -340, 300);
			}else if (dist >= 12 && dist < 30)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -340, 1000);
			}
		}while (dist >= 30 || dist < 12);
	}
	
	public static void crossBridge()
	{
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 8000); //Go forward across the bridge
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -340, 1000); //Turn left after the bridge
	}
	
	public static void avoidDynamicObstacle()
	{
		Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 6000); //Go forward
		int dist = 0;
		do
		{
			Murph.refreshDigitalPins();
			dist = getPingCenter();
			if (dist >= 30)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 2000); //Go forward
			}else if (dist < 30 && dist >= 20)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 1000); //Go forward
			}else if (dist < 20 && dist >= 5)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 750); //Go forward
			}else if (dist < 5 && dist >= 3)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 300); //Go forward
			}else if (dist < 3 && dist >= 2)
			{
				Murph.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 340, 200); //Go forward
			}
		}while (dist >= 2);
	}
	
	public static void measureConductivity()
	{
		Murph.attachServo(RXTXRobot.SERVO2, 8);
		Murph.moveServo(RXTXRobot.SERVO2, 1);
		int vTotal = conductivity();
		System.out.println("The ADC code is: " + vTotal);
		int vResistance = (vTotal * 2000) / (vTotal - 1);
		System.out.println("The resistance is: " + vResistance);
		double vConductance = (1.27 / (vResistance * 7.056));
		System.out.println("The conductance is: " + vConductance);
		if (vConductance >= 2)
		{
			pingPongServo();
		}
	}

	public static int conductivity()
	{
		Murph.refreshAnalogPins(); // Cache the Analog pin information
		int tempTotal = 0;
		int x = 0;
		for (x=0; x < 3; ++x) 
		{
			int temp = Murph.getConductivity();
			System.out.println("Sensor " + x + " has value: " + temp); 
			tempTotal += temp;
		} 
		int Vtotal = tempTotal / x;
		System.out.println("Average Voltage: " + Vtotal);
		System.out.println("This equates to 0.0035% conductivity.");
		return Vtotal;
    } 
	
	public static void pingPongServo()
	{
		Murph.attachServo(RXTXRobot.SERVO1, 9);
		Murph.moveServo(RXTXRobot.SERVO1, 1); //Drop the servo low enough to drop the ping pong ball
	}
}
