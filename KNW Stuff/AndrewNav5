//BUMP SENSOR is on ANALOG 4

import rxtxrobot.RXTXRobot;
import rxtxrobot.ArduinoNano;;

public class NavigationV5
{
	public static RXTXRobot r;
	
	public static void main(String[] args)
	{
		r = new ArduinoNano();
		r.setPort("COM3");
		r.connect();
		r.attachMotor(RXTXRobot.MOTOR1, 5);
		r.attachMotor(RXTXRobot.MOTOR2, 6);
		startingBox();
		firstTurn();
		topofHill();
		downTheRamp();
		theFarWall();
		middleAreaTurn();
		pongToBridgeFirstWall();
		pongToBridgeSecondWall();
		crossBridge();
		toSandPit();
		sandPitServo();
		r.sleep(15000);
		r.close();
		r.sleep(120000);
		System.out.println("Fuck this class");
	}	
	
	public static void startingBox()
	{
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 2000);
		int dist = 200; 
		while (dist < 30 || dist > 55)
		{
			r.refreshDigitalPins();
			dist = getPing();
			if (dist >= 120)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 1000); // Run both motors forward indefinitely 
			}else if (dist < 30)
			{
				r.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -370, 1000);
			}else if (dist < 120 && dist > 55)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 0750);
			}
				
		}
	}
	public static int getPing()
	{
		int PING_PIN = 11;
		int dist1 = r.getPing(PING_PIN);
		r.refreshDigitalPins();
		int dist2 = r.getPing(PING_PIN);
		r.refreshDigitalPins();
		int dist3 = r.getPing(PING_PIN);
		r.refreshDigitalPins();
		int dist = (dist1 + dist2 + dist3)/3;
		System.out.println("Response: " + r.getPing(PING_PIN));
		return dist;
	}
	
	public static void firstTurn()
	{
		r.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, 370, 1200);
		int dist = getPing();
		if (dist >= 125 && dist <= 185)
		{
			System.out.println("Robot sees the ramp, going towards the ramp now.");
			r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 8250);
			System.out.println("Robot sees the ramp, going towards the ramp now.");
		}else if (dist >= 185)
		{
			System.out.println("Robot doesn't see the ramp, turning around now.");
			r.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, 370, 0);
			r.sleep(2400);
			r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 8250);
		}else if (dist <= 125)
		{
			System.out.println("The ramp is closer than anticipated.");
			r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 9250);
		}
	}
		
	public static void topofHill()
	{
		System.out.println("You should now be at the top of the hill.");
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -370, 1200);
		moveServoUp();
		displayTempAndWind();
		r.sleep(1300);
		r.moveServo(RXTXRobot.SERVO3,179);
	}
	
	public static int getThermistorReading()
	{
		int sum = 0;
		int readingCount = 10;
		{
			for (int i = 0; i < readingCount; i++)
			{
				r.refreshAnalogPins();
				int reading = r.getAnalogPin(0).getValue();
				sum += reading;
			}
		}
		return sum / readingCount;
	}
	
	public static int getThermistorReading2()
	{
		int sum = 0;
		int readingCount2 = 10;
		{
			for (int i = 0; i < readingCount2; i++)
			{
				r.refreshAnalogPins();
				int reading = r.getAnalogPin(2).getValue();
				sum += reading;
			}
		}
		return sum / readingCount2;
	}
	public static double getWindSpeed()
	{
		int thermistorReading = getThermistorReading();
		int thermistorReading2 = getThermistorReading2();
		return (13.12 - thermistorReading + 0.6215 * thermistorReading2) / (11.37 - 0.3695 * thermistorReading2);
	}
	
	public static void displayTempAndWind()
	{
		int thermistorReading = getThermistorReading();
		int thermistorReading2 = getThermistorReading2();
		double windSpeed = getWindSpeed();
		
		System.out.println("The open probe reads the value: " + thermistorReading);
		System.out.println("In volts: " + (thermistorReading * (5.0/1023.0)));
		System.out.println("The closed probe reads the value: " + thermistorReading2);
		System.out.println("In volts: " + (thermistorReading2 * (5.0/1023.0)));
		System.out.printf("This value equates to: %s degrees Celsius.\n",((thermistorReading) - 739.4296)/-5.89856);
		System.out.printf("The wind speed is %s kilometers per hour.",windSpeed);
	}

	public static void moveServoUp()
	{
		r.attachServo(RXTXRobot.SERVO3, 7); //Connect the servos to the Arduino
		System.out.println("The first turn is now over. Now doing the second turn.");
		r.moveServo(RXTXRobot.SERVO3,1);
		System.out.println("The servo should currently be up.");
		r.sleep(2000);
	}
	public static void moveServoDown()
	{
		r.moveServo(RXTXRobot.SERVO3,179);
		System.out.println("The second turn is over. Now doing the third turn.");
		//r.moveServo(RXTXRobot.SERVO3,90);
		r.sleep(2000);
		System.out.println("This should bring the servos back to the default position.");
	}
	
	public static void downTheRamp()
	{
		System.out.println("Now we are going to go down the ramp.");
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 3700);
		System.out.println("You should now be at the bottom of the ramp.");
	}
	
	public static void theFarWall()
	{
		int dist = 200;
		int totalTime = 0;
		while (dist < 18 || dist >= 35)
		{
			r.refreshDigitalPins();
			dist = getPing();
			if (dist >= 35)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 600);
				totalTime += 0250;
			}else if (dist < 18)
			{
				r.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -370, 600);
				totalTime += -250;
			}else if (dist >= 18 && dist < 35)
			{
				avoidObstacles(totalTime);
			}
		}
	System.out.println("The robot is the appropriate distance from the middle area wall.");
	}
	
	public static void avoidObstacles(int totalTime)
	{
		r.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, 370, 1200);
		r.sleep(300);
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 2000);
		r.sleep(300);
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -370, 1200);
		r.sleep(300);
		int dist = 100;
		while (dist > 35)
		{
			r.refreshDigitalPins();
			dist = getPing();
			if (dist >= 40)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 750);
			}else if (dist >= 30 && dist < 40)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 400);
			}else if (dist >= 15 && dist < 30)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 250);
			}
		}
		r.sleep(300);
	}
	public static void middleAreaTurn()
	{
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -370, 1200);
		System.out.println("The robot should now be facing the ping pong ball dispenser");
		int dist = 30;
		while (dist >= 11)
		{
			r.refreshDigitalPins();
			dist = getPing();
			if (dist >= 70 && dist < 100)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 2500);
			}else if (dist >= 100)
			{
				System.out.println("The wall is far from the robot. ");
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 3700);
			}else if (dist < 70 && dist >= 40)
			{
				System.out.println("The wall is somewhat close to the robot.");
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 1500);
			}else if (dist < 40 && dist >= 11)
			{
				System.out.println("The wall is very close to the robot.");
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 750);
			}else if (dist < 5)
			{
				System.out.println("The robot should be hitting the wall");
			}
		}
		r.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -370, 500);
		r.sleep(4000);
		System.out.println("You should now have the ping pong ball.");
	}
	public static void pongToBridgeFirstWall()
	{
		System.out.println("This is the pongToBridgeFirstWall method (for debugging)");
		r.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, -370, 600);
		r.runMotor(RXTXRobot.MOTOR1, 300, RXTXRobot.MOTOR2, 370, 1200);
		int dist = 300;
		while (dist >= 20)
		{
			r.refreshDigitalPins();
			dist = getPing();
			if (dist >= 70)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 2000);
			}else if (dist < 70 && dist >= 40)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 1000);
			}else if (dist < 40 && dist >= 20)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 750);
			}
		}	
	}
	
	public static void pongToBridgeSecondWall()
	{
		System.out.println("This is the pongToBridgeSecondWall method (for debugging)");
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -370, 1200);
		int dist = 300;
		while (dist < 10 || dist > 15)
		{
			r.refreshDigitalPins();
			dist = getPing();
			if (dist >= 60)
			{
				r.runMotor(RXTXRobot.MOTOR1, -370, RXTXRobot.MOTOR2, 300, 1000);
			}else if (dist < 60 && dist >= 15)
			{
				r.runMotor(RXTXRobot.MOTOR1, -370, RXTXRobot.MOTOR2, 300, 0500);
			}else if (dist < 10)
			{
				r.runMotor(RXTXRobot.MOTOR1, 370, RXTXRobot.MOTOR2, -300, 0500);
			}
		}
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -370, 1200);
	}
	
	public static void crossBridge()
	{
		System.out.println("This is the crossBridge method");
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 7000);
	}
	
	public static void toSandPit()
	{
		System.out.println("This is the toSandPit method");
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 2000);
		r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, -370, 4000);
		int dist = 200;
		while (dist > 5)
		{
			r.refreshDigitalPins();
			dist = getPing();
			if (dist >= 50)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 3000);
			}else if (dist < 50 && dist >= 30)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 2000);
			}else if (dist < 30 && dist >= 15)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 1500);
			}else if (dist < 15 && dist >= 5)
			{
				r.runMotor(RXTXRobot.MOTOR1, -300, RXTXRobot.MOTOR2, 370, 0750);
			}
		}
	}
	
	public static void sandPitServo()
	{
		r.attachServo(RXTXRobot.SERVO2, 8);
		r.moveServo(RXTXRobot.SERVO2, 1);
		int Vtotal = conductivity();
		if (Vtotal >= 20)
		{
			pingPongServo();
		}
	}
	public static int conductivity()
	{
		r.refreshAnalogPins(); // Cache the Analog pin information
		int tempTotal = 0;
		int x = 0;
		for (x=0; x < 3; ++x) 
		{
			int temp = r.getConductivity();
			System.out.println("Sensor " + x + " has value: " + temp); 
			tempTotal += temp;
		} 
		int Vtotal = tempTotal / x;
		System.out.println("Average Voltage: " + Vtotal);
		return Vtotal;
    } 
	
	public static void pingPongServo()
	{
		r.attachServo(RXTXRobot.SERVO1, 9);
		r.moveServo(RXTXRobot.SERVO1, 1);
	}
}
